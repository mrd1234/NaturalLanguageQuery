using System.Text.Json;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using NLQueryApp.Core;
using NLQueryApp.LlmServices;

public abstract class BaseLlmService : ILlmService
{
    protected readonly HttpClient _httpClient;
    protected readonly IConfiguration _configuration;
    protected readonly ILogger _logger;
    private readonly LlmRetryHandler _retryHandler;

    protected BaseLlmService(HttpClient httpClient, IConfiguration configuration, ILogger logger)
    {
        _httpClient = httpClient;
        _configuration = configuration;
        _logger = logger;
        _retryHandler = new LlmRetryHandler(logger);
    }

    public async Task<LlmQueryResponse> GenerateSqlQueryAsync(LlmQueryRequest request)
    {
        request.ModelType = ModelType.Query;
        
        var systemPrompt = SystemPrompt.CreateSystemPrompt(
            request.DatabaseSchema, 
            request.SchemaContext, 
            request.DataSourceType, 
            request.DialectNotes);
        var userPrompt = CreateUserPrompt(request);

        return await _retryHandler.ExecuteWithRetryAsync(async () =>
        {
            var httpRequest = CreateHttpRequest(systemPrompt, userPrompt, request.ModelType);
            var response = await _httpClient.SendAsync(httpRequest);
            
            // Handle rate limiting
            if (response.StatusCode == System.Net.HttpStatusCode.TooManyRequests)
            {
                var retryAfter = GetRetryAfterDelay(response);
                throw new RateLimitException($"Rate limited. Retry after {retryAfter}ms", retryAfter);
            }
            
            response.EnsureSuccessStatusCode();
            var content = await ExtractContentFromResponse(response);
            return ParseLlmResponse(content, request.DataSourceType);
        }, GetServiceName());
    }

    public async Task<string> GenerateTitleAsync(string userQuestion)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(userQuestion))
                return "New Conversation";

            // Check if utility model is available
            if (!HasModel(ModelType.Utility))
            {
                _logger.LogInformation("Utility model not available for {ServiceName}, using fallback title generation", GetServiceName());
                return GenerateFallbackTitle(userQuestion);
            }

            // Validate service connectivity first
            if (!HasApiKey())
            {
                _logger.LogInformation("API key not available for {ServiceName}, using fallback title generation", GetServiceName());
                return GenerateFallbackTitle(userQuestion);
            }

            var prompt = CreateTitleGenerationPrompt(userQuestion);

            try
            {
                var response = await GenerateUtilityResponseAsync(prompt, ModelType.Utility);
                
                if (string.IsNullOrWhiteSpace(response))
                {
                    _logger.LogWarning("Empty response from utility model for {ServiceName}, using fallback", GetServiceName());
                    return GenerateFallbackTitle(userQuestion);
                }
                
                // Clean and validate the response
                var title = SanitizeTitle(response);
                
                if (string.IsNullOrWhiteSpace(title) || title == "New Conversation")
                {
                    _logger.LogWarning("Invalid title generated by {ServiceName}, using fallback", GetServiceName());
                    return GenerateFallbackTitle(userQuestion);
                }
                
                _logger.LogInformation("Successfully generated title using {ServiceName}: {Title}", GetServiceName(), title);
                return title;
            }
            catch (HttpRequestException httpEx) when (httpEx.Message.Contains("404"))
            {
                _logger.LogWarning("Model not found (404) for {ServiceName}, using fallback title generation. Error: {Error}", 
                    GetServiceName(), httpEx.Message);
                return GenerateFallbackTitle(userQuestion);
            }
            catch (HttpRequestException httpEx)
            {
                _logger.LogWarning("HTTP error from {ServiceName}, using fallback title generation. Error: {Error}", 
                    GetServiceName(), httpEx.Message);
                return GenerateFallbackTitle(userQuestion);
            }
            catch (TaskCanceledException tcEx)
            {
                _logger.LogWarning("Timeout from {ServiceName}, using fallback title generation. Error: {Error}", 
                    GetServiceName(), tcEx.Message);
                return GenerateFallbackTitle(userQuestion);
            }
        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "Failed to generate title for question using {ServiceName}: {Question}", GetServiceName(), userQuestion);
            return GenerateFallbackTitle(userQuestion);
        }
    }

    public async Task<string> GenerateUtilityResponseAsync(string prompt, ModelType modelType = ModelType.Utility)
    {
        if (!HasModel(modelType))
        {
            throw new InvalidOperationException($"Model type {modelType} is not configured for {GetServiceName()}");
        }

        if (!HasApiKey())
        {
            throw new InvalidOperationException($"API key is not configured for {GetServiceName()}");
        }

        try
        {
            var httpRequest = CreateHttpRequest("", prompt, modelType);
            var response = await _httpClient.SendAsync(httpRequest);
            
            // Handle rate limiting
            if (response.StatusCode == System.Net.HttpStatusCode.TooManyRequests)
            {
                var retryAfter = GetRetryAfterDelay(response);
                throw new RateLimitException($"Rate limited. Retry after {retryAfter}ms", retryAfter);
            }
            
            // Check for 404 specifically
            if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                throw new HttpRequestException($"Model not found (404) for {GetServiceName()}. Response: {errorContent}", null, response.StatusCode);
            }
            
            response.EnsureSuccessStatusCode();
            return await ExtractContentFromResponse(response);
        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "Failed to generate utility response using {ServiceName} with {ModelType}", GetServiceName(), modelType);
            throw;
        }
    }

    // Abstract methods each service must implement
    protected abstract HttpRequestMessage CreateHttpRequest(string systemPrompt, string userPrompt, ModelType modelType);
    protected abstract Task<string> ExtractContentFromResponse(HttpResponseMessage response);
    protected abstract string GetServiceName();
    protected abstract string GetModelForType(ModelType modelType);
    public abstract bool HasApiKey();
    public abstract bool HasModel(ModelType modelType);

    // Shared implementation
    private string CreateTitleGenerationPrompt(string userQuestion)
    {
        return $@"You are creating a concise title for a database query about team movements and employee data.

Context: This is a team movements database containing information about:
- Employee movements between positions/departments
- Movement statuses (Completed, Expired, Rejected, etc.)
- Movement types (permanent, temporary, secondments)
- Participants, managers, job information
- Contract details and scheduling
- History events and workflow data

Generate a concise, descriptive title (4-8 words maximum) that captures what the user is asking about.
Focus on the key entities and action they're interested in.
Do not include quotes or extra formatting. Just return the title text.

Examples:
- ""what movements are currently active?"" → ""Active Team Movements""
- ""how many people moved last month?"" → ""Monthly Movement Count""
- ""which managers approve the most movements?"" → ""Manager Approval Activity""
- ""what day of the week do movements usually expire on?"" → ""Movement Expiration Days""

User question: {userQuestion}";
    }

    protected string CreateUserPrompt(LlmQueryRequest request)
    {
        if (!string.IsNullOrEmpty(request.PreviousError))
        {
            return $@"
My previous query was:
{request.PreviousSqlQuery}

But it resulted in the following error:
{request.PreviousError}

Please fix the query. The original question was: {request.UserQuestion}
";
        }
        return $"Convert the following question to a {request.DataSourceType} query: {request.UserQuestion}";
    }

    protected LlmQueryResponse ParseLlmResponse(string content, string dataSourceType)
    {
        try
        {
            // First try to parse as JSON
            if (content.Contains("{") && content.Contains("}"))
            {
                var jsonMatch = System.Text.RegularExpressions.Regex.Match(content, @"\{.*\}", 
                    System.Text.RegularExpressions.RegexOptions.Singleline);
                if (jsonMatch.Success)
                {
                    var jsonResponse = JsonSerializer.Deserialize<LlmQueryResponse>(jsonMatch.Value, 
                        new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                
                    if (jsonResponse != null && !string.IsNullOrEmpty(jsonResponse.SqlQuery))
                    {
                        return jsonResponse;
                    }
                }
            }
        
            // Fallback: Extract query from code blocks
            var queryLanguage = GetQueryLanguage(dataSourceType);
            var sqlMatch = System.Text.RegularExpressions.Regex.Match(
                content, 
                $@"```{queryLanguage}\s*(.*?)\s*```", 
                System.Text.RegularExpressions.RegexOptions.Singleline);
            
            if (!sqlMatch.Success)
            {
                sqlMatch = System.Text.RegularExpressions.Regex.Match(
                    content, 
                    @"```\s*(.*?)\s*```", 
                    System.Text.RegularExpressions.RegexOptions.Singleline);
            }
        
            if (sqlMatch.Success)
            {
                var sql = sqlMatch.Groups[1].Value.Trim();
                var explanation = content.Replace(sqlMatch.Value, "").Trim();
            
                return new LlmQueryResponse
                {
                    SqlQuery = sql,
                    Explanation = explanation
                };
            }
        
            return new LlmQueryResponse
            {
                SqlQuery = "",
                Explanation = $"Failed to parse query from response: {content}"
            };
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error parsing LLM response");
            return new LlmQueryResponse
            {
                SqlQuery = "",
                Explanation = $"Error parsing LLM response: {ex.Message}"
            };
        }
    }

    private string GenerateFallbackTitle(string userQuestion)
    {
        if (string.IsNullOrWhiteSpace(userQuestion))
            return "New Conversation";

        // Clean the question
        var cleaned = userQuestion.Trim();
        
        // Remove common question starters to save space
        var commonStarters = new[] { "how do i ", "how can i ", "what is ", "what are ", "show me ", "find ", "get ", "list ", "count " };
        foreach (var starter in commonStarters)
        {
            if (cleaned.StartsWith(starter, StringComparison.OrdinalIgnoreCase))
            {
                cleaned = cleaned.Substring(starter.Length);
                break;
            }
        }

        // Truncate at word boundary
        if (cleaned.Length <= 50)
            return SanitizeTitle(cleaned);

        var truncated = cleaned.Substring(0, 47);
        var lastSpace = truncated.LastIndexOf(' ');
        
        if (lastSpace > 20) // Don't truncate too aggressively
        {
            truncated = truncated.Substring(0, lastSpace);
        }
        
        return SanitizeTitle(truncated + "...");
    }

    private string SanitizeTitle(string title)
    {
        if (string.IsNullOrWhiteSpace(title))
            return "New Conversation";
            
        // Remove problematic characters and clean up
        var sanitized = title.Trim()
            .Replace("\"", "")
            .Replace("'", "")
            .Replace("\n", " ")
            .Replace("\r", "")
            .Replace("\t", " ");
        
        // Collapse multiple spaces
        while (sanitized.Contains("  "))
            sanitized = sanitized.Replace("  ", " ");
        
        // Ensure reasonable length
        if (sanitized.Length > 80)
        {
            sanitized = sanitized.Substring(0, 77) + "...";
        }
        
        return string.IsNullOrWhiteSpace(sanitized) ? "New Conversation" : sanitized;
    }

    private string GetQueryLanguage(string dataSourceType) => dataSourceType.ToLower() switch
    {
        "postgres" => "sql",
        "mysql" => "sql", 
        "sqlserver" => "sql",
        "mongodb" => "mongodb",
        "elasticsearch" => "elasticsearch",
        _ => "sql"
    };
    
    private int GetRetryAfterDelay(HttpResponseMessage response)
    {
        var maxRetrySeconds = _configuration.GetValue<int>("LlmSettings:Anthropic:MaxRetryDelaySeconds", 10);
        var failFast = _configuration.GetValue<bool>("LlmSettings:Anthropic:FailFastOnRateLimit", false);
    
        if (response.Headers.RetryAfter?.Delta.HasValue == true)
        {
            var seconds = (int)response.Headers.RetryAfter.Delta.Value.TotalSeconds;
        
            if (failFast && seconds > maxRetrySeconds)
            {
                throw new InvalidOperationException($"Rate limit retry delay too long: {seconds}s. Failing fast.");
            }
        
            return Math.Min(Math.Max(seconds * 1000, 2000), maxRetrySeconds * 1000);
        }
    
        return 5000;
    }
}