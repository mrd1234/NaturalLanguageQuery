@page "/"
@using NLQueryApp.Core
@using NLQueryApp.Web.Services
@inject ApiService ApiService
@inject NavigationManager NavigationManager

<div class="container">
    <div class="row">
        <div class="col-lg-8">
            <div class="mb-4 text-center hero-section">
                @* <h1 class="display-6">Natural Language Query</h1> *@
                <p class="lead">Query your databases using natural language. Just ask questions about your data and get instant results.</p>
                <span class="focus-target" tabindex="-1"></span>
            </div>

            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>Recent Conversations</h2>
                <div>
                    <a href="/datasources" class="btn btn-outline-secondary me-2">
                        <i class="bi bi-database"></i> Manage Data Sources
                    </a>
                    <button class="btn btn-primary" @onclick="CreateNewConversation" disabled="@isCreatingConversation">
                        @if (isCreatingConversation)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        }
                        else
                        {
                            <i class="bi bi-plus-circle"></i>
                        }
                        New Conversation
                    </button>
                </div>
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">
                    <i class="bi bi-exclamation-triangle"></i> @errorMessage
                    <button type="button" class="btn btn-sm btn-outline-danger ms-2" @onclick="ReloadData">
                        <i class="bi bi-arrow-clockwise"></i> Retry
                    </button>
                </div>
            }
            
            @if (isLoading)
            {
                <div class="d-flex justify-content-center p-4">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading conversations...</span>
                    </div>
                </div>
            }
            else if (conversations == null || !conversations.Any())
            {
                <div class="card">
                    <div class="card-body text-center py-5">
                        <i class="bi bi-chat-dots display-1 text-muted mb-3"></i>
                        <h4>No conversations yet</h4>
                        <p class="text-muted">Start your first conversation to begin querying your data with natural language.</p>
                        <button class="btn btn-primary btn-lg" @onclick="CreateNewConversation" disabled="@isCreatingConversation">
                            @if (isCreatingConversation)
                            {
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            }
                            else
                            {
                                <i class="bi bi-plus-circle"></i>
                            }
                            Start Your First Conversation
                        </button>
                    </div>
                </div>
            }
            else
            {
                <div class="row">
                    @foreach (var conversation in conversations.Take(6))
                    {
                        <div class="col-md-6 mb-3">
                            <div class="card h-100 conversation-card" @onclick="() => OpenConversation(conversation.Id)" style="cursor: pointer;">
                                <div class="card-body">
                                    <h5 class="card-title">@(conversation.Title ?? "Untitled Conversation")</h5>
                                    <p class="card-text text-muted small">
                                        <i class="bi bi-clock"></i> Last updated @conversation.UpdatedAt.ToString("g")
                                    </p>
                                    <p class="card-text text-muted small">
                                        <i class="bi bi-chat"></i> @(conversation.Messages?.Count ?? 0) message@(conversation.Messages?.Count == 1 ? "" : "s")
                                    </p>
                                </div>
                                <div class="card-footer bg-transparent">
                                    <small class="text-muted">Click to continue conversation</small>
                                </div>
                            </div>
                        </div>
                    }
                </div>

                @if (conversations.Count > 6)
                {
                    <div class="text-center mt-4">
                        <p class="text-muted">Showing 6 of @conversations.Count conversations</p>
                        <button class="btn btn-outline-primary" @onclick="() => showAllConversations = !showAllConversations">
                            @if (showAllConversations)
                            {
                                <span>Show Less</span>
                            }
                            else
                            {
                                <span>Show All Conversations</span>
                            }
                        </button>
                    </div>

                    @if (showAllConversations)
                    {
                        <div class="mt-4">
                            <h4>All Conversations</h4>
                            <div class="list-group">
                                @foreach (var conversation in conversations.Skip(6))
                                {
                                    <a href="/chat/@conversation.Id" class="list-group-item list-group-item-action">
                                        <div class="d-flex w-100 justify-content-between">
                                            <h6 class="mb-1">@(conversation.Title ?? "Untitled Conversation")</h6>
                                            <small>@conversation.UpdatedAt.ToString("g")</small>
                                        </div>
                                        <small class="text-muted">@(conversation.Messages?.Count ?? 0) message@(conversation.Messages?.Count == 1 ? "" : "s")</small>
                                    </a>
                                }
                            </div>
                        </div>
                    }
                }
            }
        </div>
        
        <div class="col-lg-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-lightbulb"></i> Getting Started
                    </h5>
                </div>
                <div class="card-body">
                    <h6>How to use this app:</h6>
                    <ol class="small">
                        <li><strong>Set up a data source</strong> - Connect to your database</li>
                        <li><strong>Start a conversation</strong> - Create a new chat session</li>
                        <li><strong>Ask questions</strong> - Use natural language to query your data</li>
                        <li><strong>Get results</strong> - See your data and the generated SQL</li>
                    </ol>
                    
                    <h6 class="mt-3">Example questions:</h6>
                    <ul class="small text-muted">
                        <li>"How many records are in the database?"</li>
                        <li>"Show me the latest 10 entries"</li>
                        <li>"What are the different categories?"</li>
                        <li>"Find all entries from last month"</li>
                    </ul>
                </div>
            </div>

            <div class="card mt-3">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-database"></i> Data Sources
                    </h5>
                </div>
                <div class="card-body">
                    @if (isLoadingDataSources)
                    {
                        <div class="d-flex justify-content-center">
                            <div class="spinner-border spinner-border-sm" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else if (dataSourceCount == null || dataSourceCount == 0)
                    {
                        <div class="text-center">
                            <i class="bi bi-database-x display-6 text-muted"></i>
                            <p class="text-muted small mt-2">No data sources configured</p>
                            <a href="/datasources" class="btn btn-sm btn-primary">
                                <i class="bi bi-plus"></i> Add Data Source
                            </a>
                        </div>
                    }
                    else
                    {
                        <div class="text-center">
                            <i class="bi bi-database-check display-6 text-success"></i>
                            <p class="mt-2 mb-1"><strong>@dataSourceCount</strong> data source@(dataSourceCount == 1 ? "" : "s") configured</p>
                            <a href="/datasources" class="btn btn-sm btn-outline-primary">
                                <i class="bi bi-gear"></i> Manage
                            </a>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .conversation-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        transition: all 0.2s ease-in-out;
    }
</style>

@code {
    private List<Conversation>? conversations;
    private int? dataSourceCount;
    private bool showAllConversations = false;
    private bool isLoading = true;
    private bool isLoadingDataSources = true;
    private bool isCreatingConversation = false;
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        await Task.WhenAll(LoadConversations(), LoadDataSourceCount());
    }

    private async Task ReloadData()
    {
        errorMessage = "";
        isLoading = true;
        isLoadingDataSources = true;
        StateHasChanged();
        await LoadData();
    }

    private async Task LoadConversations()
    {
        try
        {
            isLoading = true;
            conversations = await ApiService.GetConversationsAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load conversations: {ex.Message}";
            Console.WriteLine($"Error loading conversations: {ex}");
            conversations = new List<Conversation>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadDataSourceCount()
    {
        try
        {
            isLoadingDataSources = true;
            var dataSources = await ApiService.GetDataSourcesAsync();
            dataSourceCount = dataSources?.Count ?? 0;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data sources: {ex}");
            dataSourceCount = 0;
        }
        finally
        {
            isLoadingDataSources = false;
        }
    }

    private async Task CreateNewConversation()
    {
        if (isCreatingConversation) return;

        try
        {
            isCreatingConversation = true;
            errorMessage = "";
            
            var newConversation = await ApiService.CreateConversationAsync("New Conversation");
            NavigationManager.NavigateTo($"/chat/{newConversation.Id}");
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to create conversation: {ex.Message}";
            Console.WriteLine($"Error creating conversation: {ex}");
        }
        finally
        {
            isCreatingConversation = false;
        }
    }

    private void OpenConversation(int conversationId)
    {
        try
        {
            NavigationManager.NavigateTo($"/chat/{conversationId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error navigating to conversation: {ex}");
        }
    }
}