@page "/chat/{ConversationId:int}"
@using NLQueryApp.Core
@using NLQueryApp.Core.Models
@using NLQueryApp.Web.Services
@inject ApiService ApiService
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<!-- Chat Container - Full viewport height -->
<div class="chat-container">
    <!-- Header Section - Fixed at top -->
    <div class="chat-header">
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-8">
                    <h2>
                        @(conversation?.Title ?? "New Conversation")
                    </h2>
                    <span class="focus-target" tabindex="-1"></span>
                    <div class="btn-group">
                        <button class="btn btn-outline-secondary btn-sm" @onclick="() => NavigationManager.NavigateTo('/'.ToString())">
                            <i class="bi bi-arrow-left"></i> Back to Conversations
                        </button>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="d-flex justify-content-end">
                        <div class="dropdown me-2">
                            <button class="btn btn-outline-primary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                Data Source: @(selectedDataSource?.Name ?? "Select")
                            </button>
                            <ul class="dropdown-menu">
                                @if (dataSources != null)
                                {
                                    @foreach (var ds in dataSources)
                                    {
                                        <li>
                                            <a class="dropdown-item @(selectedDataSource?.Id == ds.Id ? "active" : "")" @onclick="() => SelectDataSource(ds)">@ds.Name</a>
                                        </li>
                                    }
                                }
                                <li>
                                    <hr class="dropdown-divider">
                                </li>
                                <li>
                                    <a class="dropdown-item" @onclick='() => NavigationManager.NavigateTo("/datasources")'>Manage Data Sources</a>
                                </li>
                            </ul>
                        </div>

                        <div class="dropdown">
                            <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" disabled="@(!availableLlmServices.Any())">
                                LLM: @(selectedLlmDisplayName ?? "Loading...")
                            </button>
                            <ul class="dropdown-menu">
                                @if (availableLlmServices.Any())
                                {
                                    @foreach (var service in availableLlmServices)
                                    {
                                        <li>
                                            <a class="dropdown-item @(selectedLlmService == service.Name ? "active" : "")"
                                               @onclick="() => SelectLlmService(service)">
                                                @service.DisplayName
                                            </a>
                                        </li>
                                    }
                                }
                                else
                                {
                                    <li>
                                        <span class="dropdown-item-text text-muted">No LLM services configured</span>
                                    </li>
                                }
                                <li>
                                    <hr class="dropdown-divider">
                                </li>
                                <li>
                                    <a class="dropdown-item" @onclick='() => NavigationManager.NavigateTo("/llm-providers")'>
                                        <i class="bi bi-gear"></i> Manage LLM Providers
                                    </a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Messages Section - Scrollable content area -->
    <div class="chat-messages" id="message-container">
        <div class="messages-content">
            @if (isLoading)
            {
                <div class="d-flex justify-content-center p-4">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading conversation...</span>
                    </div>
                </div>
            }
            else if (messages == null || !messages.Any())
            {
                <div class="alert alert-info">
                    <p>No messages yet. Start your conversation by asking a question about your data.</p>
                    @if (selectedDataSource == null)
                    {
                        <p>
                            <strong>Please select a data source first.</strong>
                        </p>
                    }
                    @if (!availableLlmServices.Any())
                    {
                        <p>
                            <strong>No LLM services are configured. <a href="/llm-providers">Configure an LLM provider</a> to start querying.</strong>
                        </p>
                    }
                </div>
            }
            else
            {
                @foreach (var message in messages)
                {
                    <div class="message-wrapper position-relative">
                        <div class="card mb-3 @(message.Role == "user" ? "bg-light" : "bg-white ms-auto")" style="max-width: 80%;">
                            <div class="card-body">
                                <p class="card-text">@message.Content</p>
                                <p class="card-text">
                                    <small class="text-muted">@message.Timestamp.ToString("g") - @message.Role</small>
                                </p>
                            </div>
                            <!-- Copy button -->
                            <button class="copy-btn btn btn-sm btn-outline-secondary position-absolute opacity-0"
                                    style="top: 8px; right: 8px; transition: opacity 0.2s ease;"
                                    @onclick="() => CopyMessageToClipboard(message.Content)"
                                    title="Copy message">
                                <i class="bi bi-clipboard"></i>
                            </button>
                        </div>

                        @if (message.Role == "assistant" && queryResults.TryGetValue(message.Id, out var result) && result.Success && result.Data != null)
                        {
                            <div class="card mb-3 bg-white">
                                <div class="card-body">
                                    <h5 class="card-title">Query Results</h5>
                                    <div class="table-responsive">
                                        @if (result.Data.Any())
                                        {
                                            <table class="table table-sm table-hover">
                                                <thead>
                                                <tr>
                                                    @foreach (var column in result.Data.First().Keys)
                                                    {
                                                        <th>@column</th>
                                                    }
                                                </tr>
                                                </thead>
                                                <tbody>
                                                @foreach (var row in result.Data)
                                                {
                                                    <tr>
                                                        @foreach (var value in row.Values)
                                                        {
                                                            <td>@(value?.ToString() ?? "NULL")</td>
                                                        }
                                                    </tr>
                                                }
                                                </tbody>
                                            </table>
                                        }
                                        else
                                        {
                                            <p>No results found.</p>
                                        }
                                    </div>
                                    <div class="small text-muted mt-2">
                                        <p>
                                            <strong>SQL Query:</strong>
                                        </p>
                                        <pre><code>@result.SqlQuery</code></pre>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
            }
        </div>
    </div>
</div>

<!-- Input Section - Fixed at bottom of viewport -->
<div class="chat-input-fixed">
    <div class="container-fluid">
        <div class="input-group">
            <input type="text" class="form-control" placeholder="Ask a question about your data..."
                   @bind="userInput" @bind:event="oninput" @onkeydown="HandleKeyDown"
                   disabled="@(isProcessing || selectedDataSource == null || !availableLlmServices.Any())"
                   id="chat-input"/>
            <button class="btn btn-primary" @onclick="SendMessage"
                    disabled="@(isProcessing || selectedDataSource == null || !availableLlmServices.Any() || string.IsNullOrWhiteSpace(userInput))">
                @if (isProcessing)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                }
                else
                {
                    <span>Send</span>
                }
            </button>
        </div>
        @if (selectedDataSource == null)
        {
            <div class="text-danger mt-2">
                <small>Please select a data source to start asking questions.</small>
            </div>
        }
        @if (!availableLlmServices.Any())
        {
            <div class="text-danger mt-2">
                <small>No LLM services are available. <a href="/llm-providers">Configure an LLM provider</a> to start querying.</small>
            </div>
        }
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger mt-2">
                @errorMessage
            </div>
        }
    </div>
</div>

<style>
    /* Chat container takes full viewport minus navbar */
    .chat-container {
        display: flex;
        flex-direction: column;
        height: calc(100vh - 125px); /* Adjust based on your navbar height */
        overflow: hidden;
    }

    /* Fixed header at top */
    .chat-header {
        flex-shrink: 0;
        padding: 1rem;
        border-bottom: 1px solid #dee2e6;
        background-color: #f8f9fa;
        z-index: 100;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    /* Messages area - fills remaining space and scrolls */
    .chat-messages {
        flex: 1;
        overflow-y: auto;
        background-color: #ffffff;
        padding-left:  0;
        padding-right: 8px;
        min-height: 0; /* Important for flexbox scrolling */
    }

    /* Content wrapper inside messages area */
    .messages-content {
        padding: 1rem;
        padding-left:  0; 
        padding-right:  0;
        padding-bottom: 2rem; /* Extra padding at bottom for visual space */
    }

    /* Fixed input at bottom of viewport */
    .chat-input-fixed {
        position: fixed;
        bottom: 0;
        left: 0;
        right: 0;
        padding: 1rem;
        border-top: 1px solid #dee2e6;
        background-color: #f8f9fa;
        z-index: 1000;
        box-shadow: 0 -2px 10px rgba(0,0,0,0.1);
    }

    /* Custom scrollbar for webkit browsers */
    .chat-messages::-webkit-scrollbar {
        width: 8px;
    }

    .chat-messages::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 4px;
    }

    .chat-messages::-webkit-scrollbar-thumb {
        background: #c1c1c1;
        border-radius: 4px;
    }

    .chat-messages::-webkit-scrollbar-thumb:hover {
        background: #a8a8a8;
    }

    /* Message copy button styling */
    .message-wrapper {
        position: relative;
        transition: transform 0.1s ease-in-out;
    }

    .message-wrapper:hover {
        transform: translateY(-1px);
    }

    .message-wrapper:hover .copy-btn {
        opacity: 1 !important;
    }

    .copy-btn {
        z-index: 10;
        border-radius: 50%;
        width: 28px;
        height: 28px;
        padding: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.8rem;
        border: 1px solid #dee2e6;
        background-color: white;
        color: #6c757d;
        transition: all 0.2s ease;
    }

    .copy-btn:hover {
        background-color: #6c757d;
        color: white;
        border-color: #6c757d;
        transform: scale(1.1);
    }

    .copy-btn:focus {
        box-shadow: 0 0 0 0.2rem rgba(108, 117, 125, 0.25);
    }

    /* Input focus styling */
    #chat-input:focus {
        border-color: #80bdff;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }

    /* Smooth title update animation */
    h2 {
        transition: all 0.3s ease;
    }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .chat-container {
            height: calc(100vh - 60px); /* Smaller navbar on mobile */
        }

        .chat-header {
            padding: 0.75rem;
        }

        .chat-input-fixed {
            padding: 0.75rem;
        }

        .messages-content {
            padding: 0.75rem;
        }
    }
</style>

@code {
    [Parameter] public int ConversationId { get; set; }

    [Inject] public NavigationManager NavigationManager { get; set; } = default!;

    private Conversation? conversation;
    private List<ChatMessage> messages = new();
    private Dictionary<int, QueryResult> queryResults = new();
    private string userInput = "";
    private bool isProcessing = false;
    private bool isLoading = true;
    private string selectedLlmService = "";
    private string? selectedLlmDisplayName;
    private string errorMessage = "";

    private List<DataSourceDefinition>? dataSources;
    private DataSourceDefinition? selectedDataSource;
    private List<(string Name, string DisplayName, bool IsAvailable)> availableLlmServices = new();

// Message history navigation
    private List<string> userMessageHistory = new();
    private int currentHistoryIndex = -1;
    private string currentInputBuffer = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            errorMessage = "";

// Load conversation
            conversation = await ApiService.GetConversationAsync(ConversationId);
            if (conversation?.Messages != null)
            {
                messages = conversation.Messages.OrderBy(m => m.Timestamp).ToList();

// Build user message history for navigation
                userMessageHistory = messages
                    .Where(m => m.Role == "user" && !string.IsNullOrWhiteSpace(m.Content))
                    .Select(m => m.Content)
                    .ToList();
            }

// Load data sources
            dataSources = await ApiService.GetDataSourcesAsync();

// Set default data source if available
            if (dataSources?.Any() == true)
            {
                selectedDataSource = dataSources.First();
            }

// Load available LLM services
            await LoadLlmServices();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load conversation: {ex.Message}";
            Console.WriteLine($"Error loading conversation: {ex}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadLlmServices()
    {
        try
        {
            var allServices = await ApiService.GetAvailableLlmServicesAsync();

// Filter to only show services that are available (have API keys)
            availableLlmServices = allServices
                .Where(s => s.IsAvailable)
                .ToList();

// Set default LLM service if available
            if (availableLlmServices.Any())
            {
                var defaultService = availableLlmServices.FirstOrDefault(s => s.Name == "ollama");
                selectedLlmService = defaultService.Name;
                selectedLlmDisplayName = defaultService.DisplayName;
            }
            else
            {
                selectedLlmService = "";
                selectedLlmDisplayName = "No services available";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading LLM services: {ex.Message}");
// Fallback to ollama if API call fails
            availableLlmServices = new List<(string, string, bool)> { ("ollama", "Ollama (Local)", true) };
            selectedLlmService = "ollama";
            selectedLlmDisplayName = "Ollama (Local)";
        }
    }


    private void SelectDataSource(DataSourceDefinition dataSource)
    {
        selectedDataSource = dataSource;
        errorMessage = ""; // Clear any previous errors
    }

    private void SelectLlmService((string Name, string DisplayName, bool IsAvailable) service)
    {
        selectedLlmService = service.Name;
        selectedLlmDisplayName = service.DisplayName;
        errorMessage = ""; // Clear any previous errors
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        try
        {
            if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(userInput) && selectedDataSource != null && !isProcessing && availableLlmServices.Any())
            {
                await SendMessage();
            }
            else if (e.Key == "ArrowUp")
            {
                NavigateMessageHistory(1);
            }
            else if (e.Key == "ArrowDown")
            {
                NavigateMessageHistory(-1);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error handling key down: {ex.Message}");
        }
    }

    private void NavigateMessageHistory(int direction)
    {
        if (!userMessageHistory.Any()) return;

        try
        {
// Save current input if we're starting navigation
            if (currentHistoryIndex == -1)
            {
                currentInputBuffer = userInput ?? "";
            }

// Calculate new index
            int newIndex = currentHistoryIndex + direction;

// Handle bounds
            if (newIndex < -1)
            {
                newIndex = -1; // Stay at current input
            }
            else if (newIndex >= userMessageHistory.Count)
            {
                newIndex = userMessageHistory.Count - 1; // Stay at oldest message
            }

            currentHistoryIndex = newIndex;

// Update input value
            if (currentHistoryIndex == -1)
            {
                userInput = currentInputBuffer; // Return to current input
            }
            else
            {
                userInput = userMessageHistory[userMessageHistory.Count - 1 - currentHistoryIndex]; // Reverse order (newest first)
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error navigating message history: {ex.Message}");
        }
    }

    private async Task CopyMessageToClipboard(string content)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("copyToClipboard", content);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to copy to clipboard: {ex.Message}");
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(userInput) || selectedDataSource == null || isProcessing || !availableLlmServices.Any())
            return;

        isProcessing = true;
        errorMessage = "";

        try
        {
// Add to message history (only non-empty messages)
            if (!string.IsNullOrWhiteSpace(userInput))
            {
                userMessageHistory.Add(userInput);
            }

// Reset history navigation
            currentHistoryIndex = -1;
            currentInputBuffer = "";

// Add user message
            var userMessage = new ChatMessage
            {
                Role = "user",
                Content = userInput.Trim(),
                ConversationId = ConversationId,
                Timestamp = DateTime.UtcNow
            };

            var addMessageResponse = await ApiService.AddMessageAsync(ConversationId, userMessage);
            messages.Add(addMessageResponse.Message);

// Clear input immediately after adding user message
            var queryText = userInput.Trim();
            userInput = "";

// Check if title generation is in progress and start background polling
            if (addMessageResponse.TitleGenerationInProgress)
            {
                Console.WriteLine("Title generation started, will poll for updates");

// Start polling for title updates asynchronously (no UI indication)
                _ = Task.Run(async () =>
                {
                    try
                    {
                        var newTitle = await ApiService.PollForTitleUpdateAsync(ConversationId, conversation?.Title ?? "New Conversation");

// Update the conversation title if it changed
                        if (newTitle != conversation?.Title)
                        {
                            if (conversation != null)
                            {
                                conversation.Title = newTitle;
                            }

// Update UI on main thread
                            await InvokeAsync(StateHasChanged);

                            Console.WriteLine($"Title updated to: {newTitle}");
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Error during title polling: {ex.Message}");
                    }
                });
            }

// Update UI to show user message
            StateHasChanged();
            await JSRuntime.InvokeVoidAsync("scrollToBottom", "message-container");

// Process the query
            var result = await ApiService.ProcessQueryAsync(queryText, selectedDataSource.Id, selectedLlmService);

// Create assistant response
            string assistantContent;
            if (result.Success)
            {
                assistantContent = "Here are the results for your query.";
            }
            else
            {
                assistantContent = $"I encountered an error: {result.ErrorMessage}";
            }

            var assistantMessage = new ChatMessage
            {
                Role = "assistant",
                Content = assistantContent,
                ConversationId = ConversationId,
                Timestamp = DateTime.UtcNow
            };

            var assistantResponse = await ApiService.AddMessageAsync(ConversationId, assistantMessage);
            messages.Add(assistantResponse.Message);

// Store the query result
            queryResults[assistantResponse.Message.Id] = result;

// Update UI
            StateHasChanged();
            await JSRuntime.InvokeVoidAsync("scrollToBottom", "message-container");
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to send message: {ex.Message}";
            Console.WriteLine($"Error sending message: {ex}");
        }
        finally
        {
            isProcessing = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
// Prevent body scrolling when chat loads
            await JSRuntime.InvokeVoidAsync("eval", @"
            document.body.style.overflow = 'hidden';
            document.documentElement.style.overflow = 'hidden';
            document.getElementById('app').style.height = '100vh';
            document.getElementById('app').style.overflow = 'hidden';
        ");
        }

        if (!isLoading)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("scrollToBottom", "message-container");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error scrolling to bottom: {ex.Message}");
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
// Restore body scrolling when leaving chat
        try
        {
            await JSRuntime.InvokeVoidAsync("eval", @"
            document.body.style.overflow = '';
            document.documentElement.style.overflow = '';
            document.getElementById('app').style.height = '';
            document.getElementById('app').style.overflow = '';
        ");
        }
        catch
        {
// Ignore errors during disposal
        }
    }

}