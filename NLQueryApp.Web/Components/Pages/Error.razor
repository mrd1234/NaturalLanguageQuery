@page "/error"
@using System.Diagnostics
@using Microsoft.Extensions.Logging
@inject ILogger<Error> Logger
@inject NavigationManager NavigationManager

<PageTitle>Error</PageTitle>

<h1 class="text-danger">Error.</h1>
<span class="focus-target" tabindex="-1"></span>
<h2 class="text-danger">An error occurred while processing your request.</h2>

@if (_showErrorDetails)
{
    <p>
        <strong>Request ID:</strong> <code>@_requestId</code>
    </p>
}

<h3>Development Mode</h3>
<p>
    When running in development mode, detailed error information is provided.
</p>
<p>
    <strong>The Development environment shouldn't be enabled for deployed applications.</strong>
    It can result in displaying sensitive information to end users.
    For local debugging, enable the <strong>Development</strong> environment by setting the <strong>ASPNETCORE_ENVIRONMENT</strong> environment variable to <strong>Development</strong>
    and restarting the app.
</p>

<button class="btn btn-primary" @onclick="GoBack">Go Back</button>

@code {
    private string? _requestId;
    private bool _showErrorDetails;

    protected override void OnInitialized()
    {
        _requestId = Activity.Current?.Id ?? Guid.NewGuid().ToString();
        _showErrorDetails = true; // In a real app, you might want to control this based on configuration
        
        Logger.LogError("An error occurred while processing the request");
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/");
    }
}