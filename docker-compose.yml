version: '3.8'

services:
  api:
    build:
      context: .
      dockerfile: api.Dockerfile
    container_name: nlquery-api
    ports:
      - "7001:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=nlquery;Username=postgres;Password=postgres;Maximum Pool Size=50;Timeout=30;Command Timeout=30;
      - LlmSettings__Ollama__BaseUrl=http://ollama:11434
      - LlmSettings__Anthropic__ApiKey=${ANTHROPIC_API_KEY}
      - LlmSettings__DefaultService=anthropic
    depends_on:
      postgres:
        condition: service_healthy
      ollama:
        condition: service_started
    networks:
      - nlquery-network
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/api/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
  
  postgres:
    image: postgres:15
    container_name: nlquery-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: nlquery
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - nlquery-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    
  ollama:
    image: ollama/ollama:latest
    container_name: nlquery-ollama
    restart: unless-stopped
    networks:
      - nlquery-network
    ports:
      - "11434:11434"
    volumes:
      - ollama-data:/root/.ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [ gpu ]
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
 
#  ollama:
#    image: ollama/ollama:latest
#    container_name: nlquery-ollama
#    ports:
#      - "11434:11434"
#    volumes:
#      - ollama-data:/root/.ollama
#    networks:
#      - nlquery-network


  web:
    build:
      context: .
      dockerfile: web.Dockerfile
    container_name: nlquery-web
    ports:
      - "5001:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ApiBaseUrl=http://localhost:7001
    depends_on:
      - api
    networks:
      - nlquery-network

networks:
  nlquery-network:
    driver: bridge

volumes:
  postgres-data:
  ollama-data:



#version: '3.8'
#
#services:
#  postgres:
#    image: postgres:15
#    container_name: nlquery-postgres
#    environment:
#      POSTGRES_USER: postgres
#      POSTGRES_PASSWORD: postgres
#      POSTGRES_DB: nlquery
#    ports:
#      - "5432:5432"
#    volumes:
#      - postgres-data:/var/lib/postgresql/data
#    networks:
#      - nlquery-network
#  
#  ollama:
#    image: ollama/ollama:latest
#    container_name: nlquery-ollama
#    ports:
#      - "11434:11434"
#    volumes:
#      - ollama-data:/root/.ollama
#    networks:
#      - nlquery-network
#  
#  api:
#    build:
#      context: .
#      dockerfile: api.Dockerfile
#    container_name: nlquery-api
#    ports:
#      - "7001:80"
#    environment:
#      - ASPNETCORE_ENVIRONMENT=Development
#      - ConnectionStrings__DefaultConnection=Host=postgres;Database=nlquery;Username=postgres;Password=postgres
#      - LlmServices__Ollama__BaseUrl=http://ollama:11434
#      - LlmServices__Anthropic__ApiKey=${ANTHROPIC_API_KEY}
#      - LlmServices__DefaultService=anthropic
#    depends_on:
#      - postgres
#      - ollama
#    networks:
#      - nlquery-network
#  
#  web:
#    build:
#      context: .
#      dockerfile: web.Dockerfile
#    container_name: nlquery-web
#    ports:
#      - "5001:80"
#    environment:
#      - ASPNETCORE_ENVIRONMENT=Development
#      - ApiBaseUrl=http://localhost:7001
#    depends_on:
#      - api
#    networks:
#      - nlquery-network
#
#networks:
#  nlquery-network:
#    driver: bridge
#
#volumes:
#  postgres-data:
#  ollama-data: